Started by user Debashis Mohapatra
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/jenkins_home/workspace/Build-And-Push-Docker-Images
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Clean Workspace)
[Pipeline] cleanWs
[WS-CLEANUP] Deleting project workspace...
[WS-CLEANUP] Deferred wipeout is used...
[WS-CLEANUP] done
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Checkout Code)
[Pipeline] git
The recommended git tool is: NONE
using credential herovired
Cloning the remote Git repository
Cloning repository https://github.com/debrej2021/SampleMERNwithMicroservices_deb.git
 > git init /var/jenkins_home/workspace/Build-And-Push-Docker-Images # timeout=10
Fetching upstream changes from https://github.com/debrej2021/SampleMERNwithMicroservices_deb.git
 > git --version # timeout=10
 > git --version # 'git version 2.39.5'
using GIT_ASKPASS to set credentials 
 > git fetch --tags --force --progress -- https://github.com/debrej2021/SampleMERNwithMicroservices_deb.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/debrej2021/SampleMERNwithMicroservices_deb.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision 57f032817e4da716500e3e5e231eedf6b543cda0 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 57f032817e4da716500e3e5e231eedf6b543cda0 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git checkout -b main 57f032817e4da716500e3e5e231eedf6b543cda0 # timeout=10
Commit message: "commit"
 > git rev-list --no-walk 57f032817e4da716500e3e5e231eedf6b543cda0 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build Docker Images)
[Pipeline] sh
+ echo Building Frontend Docker Image...
Building Frontend Docker Image...
+ cd frontend
+ docker build -t 975050024946.dkr.ecr.us-west-2.amazonaws.com/frontend_deb_scaling:latest .
#0 building with "default" instance using docker driver

#1 [internal] load build definition from dockerfile
#1 transferring dockerfile: 462B done
#1 DONE 0.0s

#2 [internal] load metadata for docker.io/library/node:16
#2 DONE 0.5s

#3 [internal] load .dockerignore
#3 transferring context: 2B done
#3 DONE 0.0s

#4 [1/6] FROM docker.io/library/node:16@sha256:f77a1aef2da8d83e45ec990f45df50f1a286c5fe8bbfb8c6e4246c6389705c0b
#4 DONE 0.0s

#5 [internal] load build context
#5 transferring context: 736.39kB 0.0s done
#5 DONE 0.1s

#6 [2/6] WORKDIR /app
#6 CACHED

#7 [3/6] COPY package*.json ./
#7 CACHED

#8 [4/6] RUN npm install
#8 CACHED

#9 [5/6] COPY . .
#9 CACHED

#10 [6/6] RUN npm run build
#10 CACHED

#11 exporting to image
#11 exporting layers done
#11 writing image sha256:582021e0c4a52a8cc942904bad09708a69e567f68bedbc087318c82c3b2b63c1 done
#11 naming to 975050024946.dkr.ecr.us-west-2.amazonaws.com/frontend_deb_scaling:latest done
#11 DONE 0.0s
+ echo Building Backend Docker Image...
Building Backend Docker Image...
+ cd ../backend
+ docker build -t 975050024946.dkr.ecr.us-west-2.amazonaws.com/backend_deb_scaling:latest .
#0 building with "default" instance using docker driver

#1 [internal] load build definition from dockerfile
#1 transferring dockerfile: 413B done
#1 DONE 0.0s

#2 [internal] load metadata for docker.io/library/node:16
#2 DONE 0.1s

#3 [internal] load .dockerignore
#3 transferring context: 2B done
#3 DONE 0.0s

#4 [1/5] FROM docker.io/library/node:16@sha256:f77a1aef2da8d83e45ec990f45df50f1a286c5fe8bbfb8c6e4246c6389705c0b
#4 DONE 0.0s

#5 [internal] load build context
#5 transferring context: 91.55kB done
#5 DONE 0.0s

#6 [2/5] WORKDIR /app
#6 CACHED

#7 [3/5] COPY package*.json ./
#7 CACHED

#8 [4/5] RUN npm install
#8 CACHED

#9 [5/5] COPY . .
#9 CACHED

#10 exporting to image
#10 exporting layers done
#10 writing image sha256:ae8609cd4de9cafbb1868e32c413daec6525f22298e09d05769c594e3b45f337 done
#10 naming to 975050024946.dkr.ecr.us-west-2.amazonaws.com/backend_deb_scaling:latest done
#10 DONE 0.0s
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Push Docker Images to ECR)
[Pipeline] sh
+ echo Authenticating with Amazon ECR...
Authenticating with Amazon ECR...
+ aws ecr get-login-password --region us-west-2
+ docker login --username AWS --password-stdin 975050024946.dkr.ecr.us-west-2.amazonaws.com
WARNING! Your password will be stored unencrypted in /var/jenkins_home/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credential-stores

Login Succeeded
+ echo Pushing Frontend Image to ECR...
Pushing Frontend Image to ECR...
+ docker push 975050024946.dkr.ecr.us-west-2.amazonaws.com/frontend_deb_scaling:latest
The push refers to repository [975050024946.dkr.ecr.us-west-2.amazonaws.com/frontend_deb_scaling]
2af66d292b28: Preparing
bed5d9d43dd9: Preparing
9f8b95ff5790: Preparing
343da7338426: Preparing
05241c252eb8: Preparing
be322b479aee: Preparing
d41bcd3a037b: Preparing
fe0d845e767b: Preparing
f25ec1d93a58: Preparing
794ce8b1b516: Preparing
3220beed9b06: Preparing
684f82921421: Preparing
9af5f53e8f62: Preparing
be322b479aee: Waiting
d41bcd3a037b: Waiting
fe0d845e767b: Waiting
f25ec1d93a58: Waiting
794ce8b1b516: Waiting
3220beed9b06: Waiting
684f82921421: Waiting
9af5f53e8f62: Waiting
05241c252eb8: Pushed
be322b479aee: Layer already exists
bed5d9d43dd9: Pushed
343da7338426: Pushed
d41bcd3a037b: Layer already exists
fe0d845e767b: Layer already exists
794ce8b1b516: Layer already exists
f25ec1d93a58: Layer already exists
3220beed9b06: Layer already exists
684f82921421: Layer already exists
2af66d292b28: Pushed
9af5f53e8f62: Layer already exists
9f8b95ff5790: Pushed
latest: digest: sha256:4e5c33f00d4c88c2004dcd5d5e4102d6eb5054c76e382a961cf256db9b4beaf8 size: 3053
+ echo Pushing Backend Image to ECR...
Pushing Backend Image to ECR...
+ docker push 975050024946.dkr.ecr.us-west-2.amazonaws.com/backend_deb_scaling:latest
The push refers to repository [975050024946.dkr.ecr.us-west-2.amazonaws.com/backend_deb_scaling]
2093f69288df: Preparing
9fcd3a325958: Preparing
24d48048b9e3: Preparing
05241c252eb8: Preparing
be322b479aee: Preparing
d41bcd3a037b: Preparing
fe0d845e767b: Preparing
f25ec1d93a58: Preparing
794ce8b1b516: Preparing
3220beed9b06: Preparing
684f82921421: Preparing
9af5f53e8f62: Preparing
d41bcd3a037b: Waiting
fe0d845e767b: Waiting
f25ec1d93a58: Waiting
794ce8b1b516: Waiting
3220beed9b06: Waiting
684f82921421: Waiting
9af5f53e8f62: Waiting
be322b479aee: Layer already exists
d41bcd3a037b: Layer already exists
fe0d845e767b: Layer already exists
f25ec1d93a58: Layer already exists
794ce8b1b516: Layer already exists
3220beed9b06: Layer already exists
684f82921421: Layer already exists
9fcd3a325958: Pushed
9af5f53e8f62: Layer already exists
2093f69288df: Pushed
24d48048b9e3: Pushed
05241c252eb8: Pushed
latest: digest: sha256:ad7b2a94fe36f6e770f0dc5a56166f4f07d03742b0a599f7e21cb3f1a8168825 size: 2834
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] echo
Docker images built and pushed successfully to Amazon ECR!
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
